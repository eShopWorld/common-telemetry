using System.Collections.Generic;
using System.Threading;
using Microsoft.ApplicationInsights.Channel;
using Microsoft.ApplicationInsights.DataContracts;
using Microsoft.ApplicationInsights.Extensibility;

namespace Eshopworld.Telemetry.Configuration
{
    /// <summary>
    /// Provides a way to add properties to telemetry events generated by current logical thread.
    /// </summary>
    public class LogicalCallTelemetryInitializer : ITelemetryInitializer
    {
        public static readonly LogicalCallTelemetryInitializer Instance = new LogicalCallTelemetryInitializer();

        private readonly AsyncLocal<Dictionary<string, string>> _propertyValues = new AsyncLocal<Dictionary<string, string>>();

        private LogicalCallTelemetryInitializer()
        {
        }

        /// <summary>
        /// Sets previously registered properties of the telemetry event.
        /// </summary>
        /// <param name="telemetry"></param>
        public void Initialize(ITelemetry telemetry)
        {
            if (telemetry == null)
                return;

            var pr = _propertyValues.Value;
            if (pr is null)
                return;

            var telemetryProperties = (ISupportProperties)telemetry;
            foreach (var kv in pr)
                telemetryProperties.Properties[kv.Key] = kv.Value;
        }

        /// <summary>
        /// Registers a telemetry property name and value. Each telemetry event generated by this logical call will have this property set.
        /// </summary>
        /// <param name="name"></param>
        /// <param name="value"></param>
        public void SetProperty(string name, string value)
        {
            var dict = _propertyValues.Value;
            if (dict == null)
            {
                dict = new Dictionary<string, string>();
                _propertyValues.Value = dict;
            }

            dict[name] = value;
        }
    }
}
